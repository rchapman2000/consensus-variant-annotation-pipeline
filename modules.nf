// Creates a parameters file to store the pipeline run parameters.
process Setup {
    input:
        // The name of the reference supplied
        val refName
        // The name of the snpEFF database provided.
        val snpEffDBName
        // The output directory to be used.
        val outDir

    output:
        // The parameters file created.
        file "analysis-parameters.txt"

    publishDir "${outDir}", mode: 'copy'

    script:
    /*
    Creates a parameters file (in case the user needs to look back at how they ran the analysis).

    The parameters file contain:
        1. The Reference file supplied.
        2. The SNPEff database supplied.
    */
    """
    #!/bin/bash

    touch analysis-parameters.txt

    echo "Reference Supplied: ${refName}" >> analysis-parameters.txt
    echo "SNPEff Database Supplied: ${snpEffDBName}" >> analysis-parameters.txt
    """
}

// Aligns FASTA sequences to the reference using Minimap2
process Alignment {
    input:
        // Tuple contains the sample base name and the 
        // FASTA file containing the genome sequence.
        tuple val(base), file(seq)
        // Tupel contains the reference genome file name
        // and reference genome FASTA file.
        tuple val(refName), file(ref)
        // The output directory.
        val outDir

    output:
        // Tuple contains the sample base name and alignment
        // bam file.
        tuple val(base), file("${base}-align.bam")

    publishDir "${outDir}", mode: 'copy'

    script:
    /*
    Uses Minimap2 to align the sequence to the reference. Specifically, the 
    asm5 alignment mode is employed, allowing up to 5% divergence in the overall alignment.

    Minimap2 writes alignment data in SAM format. Thus, we convert this to bam format and
    sort using Samtools.
    */
    """
    #!/bin/bash

    minimap2 -ax asm5 ${ref} ${seq} > align.sam

    samtools view -bS align.sam | samtools sort > ${base}-align.bam
    """
}

// Performs variant calling. No filtering is needed 
// at this step because the genome assembly is assumed to be
// correct, and any variant will simply have a depth of 1 (for the genome sequence).
process Variant_Calling {
    input:
        // Tuple contains the sample base name and the BAM
        // alignment file,
        tuple val(base), file(bam)
        // Tuple contains the reference file name and 
        // reference FASTA file.
        tuple val(refName), file(ref)
        // The output directory.
        val outDir

    output:
        // Tuple contains the sample base name, a VCF fiel containing SNPS, and
        // a VCF file containing Indels.
        tuple val(base), file("${base}-snps.vcf.gz"), file("${base}-indels.vcf.gz")

    publishDir "${outDir}", mode: "copy"

    script:
    /*
    First, freebayes is used to call variants. The options supplied remove the filtering options
    defaultly employed by freebayes. Because only a single sequence is aligned to the reference, 
    there will only be, at most, a depth of 1, resuting only 1 variant observatio needed to call
    (-C 1). Additionally, no quality information will be included or necessary (-q 0). The vcfallelicprimitives
    simplifies the VCF file to biallelic site (only 1 reference and altenative listed per line).

    After this, vcftools is used to split the indels and SNPs into two different files.
    */
    """
    #!/bin/bash

    freebayes -q 0 -C 1 -f ${ref} ${bam} | vcfallelicprimitives -kg > ${base}.vcf

    vcftools --keep-only-indels --vcf ${base}.vcf --recode --recode-INFO-all --stdout > ${base}-indels.vcf
    bgzip ${base}-indels.vcf
    tabix ${base}-indels.vcf.gz

    vcftools --remove-indels --vcf ${base}.vcf --recode --recode-INFO-all --stdout > ${base}-snps.vcf
    bgzip ${base}-snps.vcf
    tabix ${base}-snps.vcf.gz
    """
}

// Annotates the variants using SNPEff
process Variant_Annotation {
    input:
        // Tuple contains the sample base name, a VCF file containing SNPs, 
        // and a VCF file containing indels.
        tuple val(base), file(snps), file(indels)
        // The SNPEff database to be used for annotation.
        val snpEffDB 
        // The output directory.
        val outDir 

    output:
        // Tuple contains the sample base name, an annotated VCF file containing SNPs, and 
        // an annotated VCF file containing indels.
        tuple val(base), file("${base}-snps-annotated.vcf"), file("${base}-indels-annotated.vcf")
        // Tuple contains the HTML report generated by SNPEff for both indels and SNPs.
        tuple file("${base}-snp-stats.html"), file("${base}-indel-stats.html")

    publishDir "${outDir}", mode: "copy"

    script:
    /*
    Runs SNPEff on both the Indels and SNPs in the VCF files.
    */
    """
    #!/bin/bash

    snpEff ${snpEffDB} ${snps} -s ${base}-snp-stats.html > ${base}-snps-annotated.vcf

    snpEff ${snpEffDB} ${indels} -s ${base}-indel-stats.html > ${base}-indels-annotated.vcf
    """
}